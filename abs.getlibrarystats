#!/bin/bash
#curl "https://abs.example.com/api/libraries/lib_c1u6t4p45c35rf0nzd/search?q=Terry%20Goodkind" \
#  -H "Authorization: Bearer exJhbGciOiJI6IkpXVCJ9.eyJ1c2Vyi5NDEyODc4fQ.ZraBFohS4Tg39NszY"
shopt -s nullglob extglob dotglob
bold="$(tput bold)"
tput0="$(tput sgr0)"
red="$(tput setaf 1)"
redbold="${red}${bold}"
abs_user="4493e7cd-5d8a-4443-b8b2-7d1fd2e6de99"

editscript(){
  local scriptpath script path swp; scriptpath=$(realpath "$0" 2>/dev/null); script="${scriptpath##*/}"; path="${scriptpath%/*}"; swp="$path/.$script.swp"; [[ ! -e "$swp" ]] && printf "\n\n%s\n\n" "$swp" && (/usr/bin/nano "$scriptpath") && exit; printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptpath" "$swp"; exit ;}

pause(){ read -rp "$*" ; }

percent_encode() {
    jq -rn --arg str "$1" '$str | @uri'
}

# Function to display book details
display_book() {
    echo "Title: ${title}: ${subtitle}"
    echo "Authors:"
    for ((j = 0; j < author_count; j++)); do
        echo "- $(echo "$book" | jq -r ".authors[$j].name")"
    done
    echo "Narrator: ${narrator}"
    echo "Published Year: ${published_year}"
    echo "Publisher: ${publisher}"
    echo "Description: ${description}"
    echo "ASIN: ${asin}"
    echo "Series: ${series}"
    echo "Genres: ${genres}"
    echo "Cover Image: ${cover_image}"
    echo "Book Directory: ${audio_directory}"
}


display_book_color() {
    echo "${redbold}Title:${tput0} ${title}: ${subtitle}"
    echo "${redbold}Authors:${tput0}"
    #for ((j = 0; j < author_count; j++)); do
    #    echo "- $(echo "$book" | jq -r ".authors[$j].name")"
    #done
    printf -- '- %s\n' "${authors[@]}"
    echo "${redbold}Narrator:${tput0} ${narrator}"
    echo "${redbold}Published Year:${tput0} ${published_year}"
    echo "${redbold}Publisher:${tput0} ${publisher}"
    echo "${redbold}Description:${tput0} ${description}"
    echo "${redbold}ASIN:${tput0} ${asin}"
    echo "${redbold}Series:${tput0} ${series}"
    echo "${redbold}Genres:${tput0} ${genres}"
    echo "${redbold}Cover Image:${tput0} ${cover_image}"
    echo "${redbold}Book Directory:${tput0} ${audio_directory}"

    if [[ ! -z "$user_media_progress" ]]; then
      echo "User Media Progress: $user_media_progress"
      echo "User duration: $user_duration"
      echo "User progress: $user_progress"
      echo "User current time: $user_currentTime"
      echo "User is finished: $user_isFinished"
    fi


    echo 
}


#[[ ! "$1" ]] && printf '\nPlease provide some motherfuckin'\'' search terms! exit (1)\n\n' && exit 1

[[ "$1" == @(edit|e|-e) ]] && editscript

delimiter=$'\001'
source ~/.config/abc.conf
query=$(percent_encode "$1")
# Construct the full API URL4
libid=$(abs.getlibraries)
libid="${libid#* }"

gettitles(){

abs_endpoint="/api/libraries/$libid/search/?q=$query"
abs_url="$abs_server$abs_endpoint"
# Make API request and store response in a variable
abs_response=$(curl -sS "$abs_server$abs_endpoint" -H "Authorization: Bearer $abstoken" )
# Check if the API response is empty or an error occurred
if [ -z "$abs_response" ]; then
    echo "Error: Failed to retrieve data from the API endpoint."
    exit 1
fi

#set -x
#trap DEBUG
# Parse JSON response
book_count=$(echo "$abs_response" | jq '.book | length')
pause "Result: $book_count Books"
#pause "$(echo "$abs_response" | jq |grep -C 8 -i "libraryItemId")"
#pause "$(echo "$abs_response") # | jq |grep -C 8 -i "libraryItemId")"
# Check if there are any books found
if [ "$book_count" -eq 0 ]; then
    echo "No books found."
    exit 0
fi

# Loop through each book
for ((i=0; i<book_count; i++)); do
    book=$(echo "$abs_response" | jq ".book[$i].libraryItem.media.metadata")
    title=$(echo "$book" | jq -r '.title')
    subtitle=$(echo "$book" | jq -r '.subtitle')
    author_count=$(echo "$book" | jq '.authors | length')
    narrator=$(echo "$book" | jq -r '.narratorName')
    published_year=$(echo "$book" | jq -r '.publishedYear')
    publisher=$(echo "$book" | jq -r '.publisher')
    description=$(echo "$book" | jq -r '.description')
    asin=$(echo "$book" | jq -r '.asin')
    series=$(echo "$book" | jq -r '.series[0].name')
    genres=$(echo "$book" | jq -r '.genres | join(", ")')
#    cover_image=$(echo "$abs_response" | jq -r ".book[$i].libraryItem.media.coverPath")
 libraryItemId=$(echo "$abs_response" | jq -r ".book[$i].libraryItem.media.libraryItemId")
#   libraryItemId=$(echo "$abs_response" | jq -r '.book[0].libraryItem.id')
#    pause "$libraryItemId"
    audio_directory=$(echo "$book" | jq -r '.path'); audio_directory="${audio_directory%\/*}"

    # Display book details
#    display_book
    # Add authors to the array
    for ((j = 0; j < author_count; j++)); do
        authors+=("$(echo "$book" | jq -r ".authors[$j].name")")
    done
    # Add title with subtitle to the array
    title_subtitles+=("${title}${delimiter}: ${subtitle}")
    titles+=("${title}")
    subtitles+=("${subtitle}")
    itemids+=( "${libraryItemId}" )


#   declare -A title_id
#   declare -A id_title

#    for ((k = 0; k < ${#itemids[@]}; k++)); do
#      title_id["${titles[k]}"]="${itemids[k]}"
#pause "hi ${title_id[${titles[k]}]}"
#      id_title["${itemids[k]}"]="${titles[k]}"
#    done
#echo "${titles[i]} ${itemids[$i]}"
      title_id["${titles[$i]}"]="${itemids[$i]}"
      id_title["${itemids[i]}"]="${titles[i]}"
#    done

done
}

#arrays must be declared outside of functions to be global

abs_endpoint="/api/libraries/"$libid"/stats"

response="$(curl "$abs_server$abs_endpoint"   -H "Authorization: Bearer $abs_token")"

#!/bin/bash

# Define color and formatting variables
red=$(tput setaf 1)
bold=$(tput bold)
tput0=$(tput sgr0)

# Make API call and store JSON response

# Parse JSON response
totalItems=$(echo "$response" | jq -r '.totalItems')
totalAuthors=$(echo "$response" | jq -r '.totalAuthors')
totalGenres=$(echo "$response" | jq -r '.totalGenres')
totalDuration=$(echo "$response" | jq -r '.totalDuration')
numAudioTrack=$(echo "$response" | jq -r '.numAudioTrack')
totalSize=$(echo "$response" | jq -r '.totalSize')

# Print results with formatting
echo "${bold}${red}Library Stats:${tput0}"
echo "Total Items: ${bold}$totalItems${tput0}"
echo "Total Authors: ${bold}$totalAuthors${tput0}"
echo "Total Genres: ${bold}$totalGenres${tput0}"
echo "Total Duration: ${bold}$totalDuration seconds${tput0}"
echo "Number of Audio Tracks: ${bold}$numAudioTrack${tput0}"
echo "Total Size: ${bold}$totalSize bytes${tput0}"

# Print longest items
echo "${bold}${red}Longest Items:${tput0}"
longestItems=$(echo "$response" | jq -r '.longestItems[] | "\(.title): \(.duration) seconds"')
echo "$longestItems" | while read -r item; do
    echo "${bold}$item${tput0}"
done

# Print largest items
echo "${bold}${red}Largest Items:${tput0}"
largestItems=$(echo "$response" | jq -r '.largestItems[] | "\(.title): \(.size) bytes"')
echo "$largestItems" | while read -r item; do
    echo "${bold}$item${tput0}"
done

# Print authors with count
echo "${bold}${red}Authors:${tput0}"
authors=$(echo "$response" | jq -r '.authorsWithCount[] | "\(.name): \(.count) books"')
echo "$authors" | while read -r author; do
    echo "${bold}$author${tput0}"
done

# Print genres with count
echo "${bold}${red}Genres:${tput0}"
genres=$(echo "$response" | jq -r '.genresWithCount[] | "\(.genre): \(.count) items"')
echo "$genres" | while read -r genre; do
    echo "${bold}$genre${tput0}"
done




exit
declare -A title_id
declare -A id_title

gettitles

[[ "$(gum choose --height=$(tput lines) --select-if-one "titles" "subtitles")" = titles ]] && query="$(gum choose --select-if-one --height=$(tput lines) "${title_subtitles[@]}")"

query="${query%$'\001'*}"

query="${title_id["$query"]}"
abs_endpoint="/api/libraries/$libid/search/?q=$query"

#curl "https://abs.example.com/api/items/li_8gch9ve09orgn4fdz8?expanded=1&include=progress,rssfeed,authors" \
#  -H "Authorization: Bearer exJhbGciOiJI6IkpXVCJ9.eyJ1c2Vyi5NDEyODc4fQ.ZraBFohS4Tg39NszY"
abs_endpoint="/api/items/$query?expanded=1&include=progress,authors" 
#  -H "Authorization: Bearer exJhbGciOiJI6IkpXVCJ9.eyJ1c2Vyi5NDEyODc4fQ.ZraBFohS4Tg39NszY"


title_response=$(curl -sS "$abs_server$abs_endpoint" -H "Authorization: Bearer $abstoken" )

# Parse JSON response
title_count=$(echo "$title_response" | jq '.libraryFiles | length')
title_count=$(echo "$title_response" | jq '. | if .id then 1 else 0 end')

# Check if there are any books found
if [ "$title_count" -eq 0 ]; then
    echo "No books found."
    exit 0
fi

unset authors
unset author_count

    # Parse JSON data
    title=$(echo "$title_response" | jq -r '.media.metadata.title')
    authors=$(echo "$title_response" | jq -r '.media.metadata.authors[0].name')
    author_count=$(echo "$title_response" | jq '.media.metadata.authors | length')
    authors=()

# Loop through authors and add them to the authors array
    for ((j = 0; j < author_count; j++)); do
      authors+=("$(echo "$title_response" | jq -r ".media.metadata.authors[$j].name")")
    done

    narrator=$(echo "$title_response" | jq -r '.media.metadata.narrators[0]')
    published_year=$(echo "$title_response" | jq -r '.media.metadata.publishedYear')
    publisher=$(echo "$title_response" | jq -r '.media.metadata.publisher')
    description=$(echo "$title_response" | jq -r '.media.metadata.description')
    asin=$(echo "$title_response" | jq -r '.media.metadata.asin')
    series=$(echo "$title_response" | jq -r '.media.metadata.series[0]')
    genres=$(echo "$title_response" | jq -r '.media.metadata.genres | join(", ")')
    cover_image=$(echo "$title_response" | jq -r '.media.coverPath')
    audio_directory=$(echo "$title_response" | jq -r '.media.audioFiles[0].metadata.path | split("/") | .[:-1] | join("/")')

#user_media_progress=$(echo "$title_response" | jq -r --arg user "$user" '.userMediaProgress | select(.user == 4493e7cd-5d8a-4443-b8b2-7d1fd2e6de99)')
#user_media_progress=$(echo "$title_response" | jq -r --arg user "$abs_user" '.userMediaProgress | select(.user == $abs_user)')
user_media_progress=$(echo "$title_response" | jq -r '.userMediaProgress')

pause "$(echo "$user_media_progress"|jq)"
pause "$(echo "$title_response"|jq)"
if [ -n "$user_media_progress" ]; then
    # Parse the specific fields for the user progress
    user_duration=$(echo "$user_media_progress" | jq -r '.durations')
    user_progress=$(echo "$user_media_progress" | jq -r '.progress')
    user_currentTime=$(echo "$user_media_progress" | jq -r '.currentTime')
    user_isFinished=$(echo "$user_media_progress" | jq -r '.isFinished')

#     # Extract user media progress
#     user_media_progress=$(echo "$title_response" | jq -r '.userMediaProgress')
#     user_duration=$(echo "$user_media_progress" | jq -r '.duration')
#     user_progress=$(echo "$user_media_progress" | jq -r '.progress')
#     user_currentTime=$(echo "$user_media_progress" | jq -r '.currentTime')
#     user_isFinished=$(echo "$user_media_progress" | jq -r '.isFinished')

fi

    # Display book details
titdisplaychoice=$(gum choose --height=$(tput lines) < <(display_book_color))

#    # Add title with subtitle to the array
#    titles+=("${title}: ${subtitle}")

titdisplaychoice="${titdisplaychoice%%:*}"

if [[ "$titdisplaychoice" = @(Book\ Directory|Title) ]]; then
  echo
  cd "$audio_directory"
  tmpdir="$(mktemp -d)"
#  cat ~/.bashrc ~/.bash_aliases >> "$tmpdir/.bashrc"
  cp ~/.bashrc "$tmpdir"
  echo "PS1='\[\033[3m\]\D{%#Z %-I.%M %P}\[\033[01;34m\]  pwd: \w\[\033[00m\]\[\033[0m\]\[\033[01;31m\] \n\[\033[1;31m\]abs.searchlibrary \[\033[1;33m\]bash@\h \[\033[1;37m\]\$ '" >> "$tmpdir/.bashrc"
 #rssh -d "${audio_directory%\/*}" -s "ls rm exa indexopus ."
  cd "${audio_directory%\/*}"
  /usr/bin/bash --rcfile "$tmpdir/.bashrc"
 #proot -r "${audio_directory%\/*}" /usr/bin/bash --rcfile "$tmpdir/.bashrc"
fi



exit
