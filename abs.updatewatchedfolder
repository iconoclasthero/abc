#!/bin/bash

source ~/.config/abc.conf
shopt -s nullglob extglob dotglob
bold="$(tput bold)"
tput0="$(tput sgr0)"
red="$(tput setaf 1)"
redbold="${red}${bold}"
abs_user="4493e7cd-5d8a-4443-b8b2-7d1fd2e6de99"
libid="$default_library"
libid="${default_library#* }"

editscript(){
  local scriptpath script path swp; scriptpath=$(realpath "$0" 2>/dev/null); script="${scriptpath##*/}"; path="${scriptpath%/*}"; swp="$path/.$script.swp"; [[ ! -e "$swp" ]] && printf "\n\n%s\n\n" "$swp" && (/usr/bin/nano "$scriptpath") && exit; printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptpath" "$swp"; exit ;}

pause(){ read -rp "$*" ; }

percent_encode() {
    jq -rn --arg str "$1" '$str | @uri'
}

display_book() {
    echo "${redbold}Title:${tput0} ${title}: ${subtitle}"
    echo "${redbold}Authors:${tput0}"
    #for ((j = 0; j < author_count; j++)); do
    #    echo "- $(echo "$book" | jq -r ".authors[$j].name")"
    #done
    printf -- '- %s\n' "${authors[@]}"
    echo "${redbold}Narrator:${tput0} ${narrator}"
    echo "${redbold}Published Year:${tput0} ${published_year}"
    echo "${redbold}Publisher:${tput0} ${publisher}"
    echo "${redbold}Description:${tput0} ${description}"
    echo "${redbold}ASIN:${tput0} ${asin}"
    echo "${redbold}Series:${tput0} ${series}"
    echo "${redbold}Genres:${tput0} ${genres}"
    echo "${redbold}Cover Image:${tput0} ${cover_image}"
    echo "${redbold}Book Directory:${tput0} ${audio_directory}"

    if [[ ! -z "$user_media_progress" ]]; then
      echo "User Media Progress: $user_media_progress"
      echo "User duration: $user_duration"
      echo "User progress: $user_progress"
      echo "User current time: $user_currentTime"
      echo "User is finished: $user_isFinished"
    fi
    echo
}


gettitles(){
  abs_endpoint="/api/libraries/$libid/search/?q=$query&limit=120"
  abs_url="$abs_server$abs_endpoint"

  # Make API request and store response in a variable
  abs_response=$(curl -sS "$abs_server$abs_endpoint" -H "Authorization: Bearer $abstoken" )


  # Check if the API response is empty or an error occurred
  if [ -z "$abs_response" ]; then
    echo "Error: Failed to retrieve data from the API endpoint."
    exit 1
  fi

  # Parse JSON response
  book_count=$(echo "$abs_response" | jq '.book | length')


  # Check if there are any books found
  if [ "$book_count" -eq 0 ]; then
    echo "No books found."
    exit 0
  fi

  # Loop through each book
  ## There's probably no reason to enable them here since they\'re not needed in the list...
  for ((i=0; i<book_count; i++)); do
      book=$(echo "$abs_response" | jq ".book[$i].libraryItem.media.metadata")
      title=$(echo "$book" | jq -r '.title')
      subtitle=$(echo "$book" | jq -r '.subtitle')
      author_count=$(echo "$book" | jq '.authors | length')
      published_year=$(echo "$book" | jq -r '.publishedYear')
      asin=$(echo "$book" | jq -r '.asin')
      libraryItemId=$(echo "$abs_response" | jq -r ".book[$i].libraryItem.media.libraryItemId")
      audio_directory=$(echo "$book" | jq -r '.path'); audio_directory="${audio_directory%\/*}"
  ##    series=$(echo "$book" | jq -r '.series[0].name')
  ##    narrator=$(echo "$book" | jq -r '.narratorName')
  ##    publisher=$(echo "$book" | jq -r '.publisher')
  ##    description=$(echo "$book" | jq -r '.description')
  ##    genres=$(echo "$book" | jq -r '.genres | join(", ")')
  ##    cover_image=$(echo "$abs_response" | jq -r ".book[$i].libraryItem.media.coverPath")

      # Add authors to the array
      for ((j = 0; j < author_count; j++)); do
          authors+=("$(echo "$book" | jq -r ".authors[$j].name")")
      done
      # Add title with subtitle to the array

  #arrays:
      title_subtitles+=("${title}${delimiter}: ${subtitle}")
      titles+=("${title}")
      subtitles+=("${subtitle}")
      itemids+=( "${libraryItemId}" )
      title_id["${titles[$i]}"]="${itemids[$i]}"
      id_title["${itemids[i]}"]="${titles[i]}"

  done
}


#[[ ! "$1" ]] && printf '\nPlease provide some motherfuckin'\'' search terms! exit (1)\n\n' && exit 1

[[ "$1" = @(edit|e|-e) ]] && editscript

. ~/.config/abc.conf

if [[ "$1" = -l || "$1" = --library ]]; then
shift
libid="$1"
shift
fi




[[ ! "$abs_server" || ! "$abs_token" ]] && echo "Check ~/.config/abc.conf" && exit 1

abs_endpoint="/api/watcher/update"

JSON_PAYLOAD=$(cat <<EOF
{
  "libraryId": "$libid",
  "path": "$PWD",
  "type": "add"  `# or "unlink" or "rename"`
`# "oldPath": "your-old-path" # Uncomment this line if type is "rename"`
}
EOF
)

pause "$JSON_PAYLOAD"
pause "abs_response=curl -X POST "$abs_server$abs_endpoint"  -H "Content-Type: application/json" -H "Authorization: Bearer $abs_token"  -d "$JSON_PAYLOAD")"

abs_response="$(curl -X POST "$abs_server$abs_endpoint" \
     -H "Content-Type: application/json" \
     -H "Authorization: Bearer $abs_token" \
     -d "$JSON_PAYLOAD")"

echo "$abs_response"

abs.searchlibrary "${PWD%%:*}"
